#include <WiFi.h>
#include <WebServer.h>
#include "PCF8575.h"
#include "Arduino.h"
#include "PCA9685.h"

#include <Arduino_PortentaMachineControl.h>

PCA9685 pwmController; 

#define SDA 4
#define SCL 16
#define delaytime 50
// Set i2c address
PCF8575 pcf8575_R1(0x24,SDA,SCL);
PCF8575 pcf8575_R2(0x25,SDA,SCL);

const char* ssid = "TP-Link_244A";
const char* password = "";

WebServer server(80);

int L_axis=0;
int R_axis=0;

int F_R_speed_val;
int R_R_speed_val;

int F_L_speed_val;
int R_L_speed_val;

int R_DIR =P3;
int R_ENB =P4;

int L_DIR =P5;
int L_ENB =P6;

 int speed_R =3;
 int speed_L =2;
 
 int L_motor1_U=16;
  int L_motor1_D=17;
 
 int L_motor2_U=18;
 int L_motor2_D=19;

 int L_motor3_U=20;
 int L_motor3_D=21;

 int L_motor4_U=22;
 int L_motor4_D=23;

 int L_clamp_open=24;
 int L_clamp_close=25;

 int L_camra_U=26;
 int L_camra_D=27;



TwoWire I2Cone = TwoWire(0);

void handleRoot() {
  server.send(200, "text/plain", "Hello from ESP32!");
}

void handleGamepadData() {
  if (server.hasArg("data")) {
    String data = server.arg("data");
    //Serial.println("Received gamepad data: " + data);
    
    // تحليل البيانات المستلمة
    int button_X = data.substring(0,1).toInt(); // الزر الأول
    int button_O = data.substring(1,2).toInt(); // الزر الأول
    int button_S = data.substring(2,3).toInt(); // الزر الأول
    int button_T = data.substring(3,4).toInt(); // الزر الأول

    int button_L1 = data.substring(4,5).toInt(); // الزر الأول
    int button_R1 = data.substring(5,6).toInt(); // الزر الأول

    int button_L2 = data.substring(6,7).toInt(); // الزر الأول
    int button_R2 = data.substring(7,8).toInt(); // الزر الأول

    int button_RU = data.substring(12,13).toInt(); // الزر الأول
    int button_RD = data.substring(13,14).toInt(); // الزر الأول
    int button_RL = data.substring(14,15).toInt(); // الزر الأول
    int button_RR = data.substring(15,16).toInt(); // الزر الأول

    
    
    L_axis = data.substring(31, 34).toInt(); // المحور الأول
    R_axis = data.substring(52, 55).toInt(); // المحور الثاني

    
   
    pcf8575_R2.digitalWrite(L_motor1_U, button_R1);
    pcf8575_R2.digitalWrite(L_motor1_D, button_R2);

    pcf8575_R2.digitalWrite(L_motor2_U, button_L1);
    pcf8575_R2.digitalWrite(L_motor2_D, button_L2);

    pcf8575_R2.digitalWrite(L_motor3_U, button_RU);
    pcf8575_R2.digitalWrite(L_motor3_D, button_RD);

   pcf8575_R2.digitalWrite(L_motor4_U, button_RL);
    pcf8575_R2.digitalWrite(L_motor4_D, button_RR);

    pcf8575_R2.digitalWrite(L_motor4_U, button_RL);
    pcf8575_R2.digitalWrite(L_motor4_D, button_RR);

  if(L_axis<=220){
  F_L_speed_val= map(L_axis,220,100,0,1850);
  Serial.println(F_L_speed_val);
   pwmController.setChannelPWM(speed_L, F_L_speed_val);
  pcf8575_R1.digitalWrite(L_ENB, LOW);
  pcf8575_R1.digitalWrite(L_DIR, HIGH);
  Serial.println("يسار للأمام ");
  }

   if(L_axis>240){
  R_L_speed_val= map(L_axis,240,355,0,1850);
  Serial.println(R_L_speed_val);
  pwmController.setChannelPWM(speed_L, R_L_speed_val);
  pcf8575_R1.digitalWrite(L_ENB, LOW);
  pcf8575_R1.digitalWrite(L_DIR, LOW);
  Serial.println("يسار للخلف ");
  }

   if (R_axis<=220){
  F_R_speed_val= map(R_axis,220,100,0,1850);
  Serial.println(F_R_speed_val);
  pwmController.setChannelPWM(speed_R, F_R_speed_val);
  pcf8575_R1.digitalWrite(R_ENB, LOW);
  pcf8575_R1.digitalWrite(R_DIR, LOW);
  Serial.println("يمين للأمام ");
  }

   if (R_axis>=240){
  R_R_speed_val= map(R_axis,240,355,0,1850);
  Serial.println(R_R_speed_val);
  pwmController.setChannelPWM(speed_R, R_R_speed_val);
  pcf8575_R1.digitalWrite(R_ENB, LOW);
  pcf8575_R1.digitalWrite(R_DIR, HIGH);
  Serial.println("يمين للخلف ");
  }

  
  if (R_axis>220 && R_axis<240){
  Serial.println("stop R ");
  pwmController.setChannelPWM(speed_R, 0);
  pcf8575_R1.digitalWrite(R_ENB, HIGH);
  pcf8575_R1.digitalWrite(R_DIR, HIGH);
  }

 if (L_axis>220 && L_axis<240){
  
  pwmController.setChannelPWM(speed_L, 0);
  pcf8575_R1.digitalWrite(L_ENB, HIGH);
  pcf8575_R1.digitalWrite(L_DIR, HIGH);
  
  }


    
 
    
    server.send(200, "text/plain", "Data received by ESP32");
  } else {
    server.send(400, "text/plain", "Missing gamepad data");
  }
}

void setup() {
  Serial.begin(115200);
  Wire.begin();
  MachineControl_DigitalProgrammables.begin();
  MachineControl_DigitalOutputs.begin(true);
  MachineControl_DigitalOutputs.writeAll(0);
    Wire.begin(4,16);                   
    pwmController.resetDevices();     
    pwmController.init(); 
                
    //pwmController.resetDevices();     
   // pwmController.init(); 
pcf8575_R1.digitalWrite(0, HIGH);
pcf8575_R1.digitalWrite(1, HIGH);
pcf8575_R1.digitalWrite(2, HIGH);
pcf8575_R1.digitalWrite(3, HIGH);
pcf8575_R1.pinMode(L_ENB,OUTPUT);
pcf8575_R1.pinMode(L_DIR,OUTPUT);
pcf8575_R1.pinMode(R_ENB,OUTPUT);
pcf8575_R1.pinMode(R_DIR,OUTPUT);

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi..");
  }
  Serial.println("Connected to WiFi");
  Serial.println(WiFi.localIP());
  server.on("/", handleRoot);
  server.on("/gamepad", HTTP_POST, handleGamepadData);
  
  server.begin();
  Serial.println("HTTP server started");

   
  
 
}





void loop() {
  server.handleClient();

 
}
